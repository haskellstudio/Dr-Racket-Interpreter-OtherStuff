#lang racket
(require "parenthec.rkt")

(define-union expr
  (const cexp)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (capture body)
  (return kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))

(define-union clos
  (closure body env))

(define-union envr
  (empty-env)
  (extend-env a^ env^))

(define-union kt
  (*-inner-k k^ k^^)
  (*-outer-k x1^ env^ k^)
  (sub1-k k^)
  (zero-k k^)
  (if-k conseq^ alt^ env^ k^)
  (return-k v-exp^ env^)
  (let-k body^ env^ sk^)
  (app-inner-k v^ k^)
  (app-outer-k rand^ env^ k^)
  (empty-k))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define *-inner-k
  (lambda (k^ k^^)
    `(*-inner-k ,k^ ,k^^)))

(define *-outer-k
  (lambda (x1^ env^ k^)
    `(*-outer-k ,x1^ ,env^ ,k^)))

(define sub1-k
  (lambda (k^)
    `(sub1-k ,k^)))

(define zero-k
  (lambda (k^)
    `(zero-k ,k^)))

(define if-k
  (lambda (conseq^ alt^ env^ k^)
    `(if-k ,conseq^ ,alt^ ,env^ ,k^)))

(define return-k
  (lambda (v-exp^ env^)
    `(return-k ,v-exp^ ,env^)
    ))

(define let-k
  (lambda (body^ env^ k^)
    `(let-k ,body^ ,env^ ,k^)))

(define app-inner-k
  
  (lambda (v^ k^)
    `(app-inner-k ,v^ ,k^)))

(define app-outer-k
  (lambda (rand^ env^ k^)
    `(app-outer-k ,rand^ ,env^ ,k^)))

(define value-of-cps
  (lambda (exp env k)
    (union-case exp expr
      [(const cexp) (let* ((v cexp))
                      (apply-k k v))]
      [(mult nexp1 nexp2) (let* ((exp nexp2)
                                 (k (kt_*-outer-k nexp1 env k)))
                            (value-of-cps exp env k))]
      [(sub1 nexp) (let* ((exp nexp)
                          (k (kt_sub1-k k)))
                     (value-of-cps exp env k))]
      [(zero nexp) (let* ((exp nexp)
                          (k (kt_zero-k k)))
                     (value-of-cps exp env k))]
      [(if test conseq alt) (let* ((exp test)
                                   (k (kt_if-k conseq alt env k)))
                              (value-of-cps exp env k))]
      [(capture body) (let* ((exp body)
                             (env (envr_extend-env k env)))
                        (value-of-cps exp env k))]
      [(return kexp vexp) (let* ((exp kexp)
                                 (k (kt_return-k vexp env)))
                            (value-of-cps exp env k))]
      [(let exp body) (let* ((k (kt_let-k body env k)))
                        (value-of-cps exp env k))]
      [(var n) (let* ((k^ k))
                 (apply-env env n k^))]
      [(lambda body) (let* ((v (clos_closure body env)))
                       (apply-k k v))]
      [(app rator rand) (let* ((exp rator)
                               (k (kt_app-outer-k rand env k)))
                          (value-of-cps exp env k))]
      )))

(define extend-env
  (lambda (a^ env^)
    `(extend-env ,a^ ,env^)
    ))

(define empty-env
  (lambda ()
    `(empty-env)))

(define apply-env
  (lambda (env y k^)
    (union-case env envr
      [(extend-env a^ env^) (if (zero? y)
                                (let* ((k k^)
                                       (v a^))
                                  (apply-k k v))
                                (let* ((env env^)
                                       (y (sub1 y)))
                                  (apply-env env y k^)))]
      [(empty-env) (error 'value-of "unbound identifier")]
      )))

(define closure
  (lambda (body env)
    `(closure ,body ,env)))

(define apply-closure
  (lambda (cl a k^)
    (union-case cl clos
      [(closure body env) (let* ((exp body)
                                 (env (envr_extend-env a env))
                                 (k k^))
                            (value-of-cps exp env k))]
      )))

(define empty-k
  (lambda ()
    `(empty-k)))

(define apply-k
  (lambda (k v)
    (union-case k kt
      [(*-inner-k k^ k^^) (let* ((k k^^)
                                 (v (* k^ v)))
                            (apply-k k v))]
      [(*-outer-k x1^ env^ k^) (let* ((exp x1^)
                                      (env env^)
                                      (k (kt_*-inner-k v k^)))
                                 (value-of-cps exp env k))]
      [(sub1-k k^) (let* ((k k^)
                          (v (sub1 v)))
                     (apply-k k v))]
      [(zero-k k^) (let* ((k k^)
                          (v (zero? v)))
                     (apply-k k v))]
      [(if-k conseq^ alt^ env^ k^) (if v
                                       (let* ((exp conseq^)
                                              (env env^)
                                              (k k^))
                                         (value-of-cps exp env k))
                                       (let* ((exp alt^)
                                              (env env^)
                                              (k k^))
                                         (value-of-cps exp env k)))]
      [(return-k v-exp^ env^) (let* ((exp v-exp^)
                                     (env env^)
                                     (k v))
                                (value-of-cps exp env k))]
      [(let-k body^ env^ k^) (let* ((exp body^)
                                     (env (envr_extend-env v env^))
                                     (k k^))
                                (value-of-cps exp env k))]
      [(app-inner-k v^ k^) (let* ((cl v^)
                                  (a v))
                             (apply-closure cl a k^))]
      [(app-outer-k rand^ env^ k^) (let* ((exp rand^)
                                          (env env^)
                                          (k (kt_app-inner-k v k^)))
                                     (value-of-cps exp env k))]
      [(empty-k) v]
      )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define main 
  (lambda ()
    (let* ((exp (expr_let
                 (expr_lambda
                  (expr_lambda
                   (expr_if
                    (expr_zero (expr_var 0))
                    (expr_const 1)
                    (expr_mult (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_sub1 (expr_var 0)))))))
                 (expr_mult
                  (expr_capture
                   (expr_app
                    (expr_app (expr_var 1) (expr_var 1))
                    (expr_return (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_const 4)))))
                  (expr_const 5))))
           (env (envr_empty-env))
           (k (kt_empty-k)))
      (value-of-cps exp env k))
    ))



